// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     stream_data_record_message_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArrayRecordLastValueExpresssionDTOTypeEnum int

const (
	UnionNullArrayRecordLastValueExpresssionDTOTypeEnumArrayRecordLastValueExpresssionDTO UnionNullArrayRecordLastValueExpresssionDTOTypeEnum = 1
)

type UnionNullArrayRecordLastValueExpresssionDTO struct {
	Null                               *types.NullVal
	ArrayRecordLastValueExpresssionDTO []RecordLastValueExpresssionDTO
	UnionType                          UnionNullArrayRecordLastValueExpresssionDTOTypeEnum
}

func writeUnionNullArrayRecordLastValueExpresssionDTO(r *UnionNullArrayRecordLastValueExpresssionDTO, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArrayRecordLastValueExpresssionDTOTypeEnumArrayRecordLastValueExpresssionDTO:
		return writeArrayRecordLastValueExpresssionDTO(r.ArrayRecordLastValueExpresssionDTO, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayRecordLastValueExpresssionDTO")
}

func NewUnionNullArrayRecordLastValueExpresssionDTO() *UnionNullArrayRecordLastValueExpresssionDTO {
	return &UnionNullArrayRecordLastValueExpresssionDTO{}
}

func (r *UnionNullArrayRecordLastValueExpresssionDTO) Serialize(w io.Writer) error {
	return writeUnionNullArrayRecordLastValueExpresssionDTO(r, w)
}

func DeserializeUnionNullArrayRecordLastValueExpresssionDTO(r io.Reader) (*UnionNullArrayRecordLastValueExpresssionDTO, error) {
	t := NewUnionNullArrayRecordLastValueExpresssionDTO()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArrayRecordLastValueExpresssionDTOFromSchema(r io.Reader, schema string) (*UnionNullArrayRecordLastValueExpresssionDTO, error) {
	t := NewUnionNullArrayRecordLastValueExpresssionDTO()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArrayRecordLastValueExpresssionDTO) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"recordFieldExpression\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"long\"}]},{\"default\":null,\"name\":\"keyGroup\",\"type\":[\"null\",{\"items\":{\"type\":\"map\",\"values\":\"string\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"recordTypeId\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"allDataExists\",\"type\":[\"null\",\"boolean\"]},{\"default\":false,\"name\":\"isAttributeRecordType\",\"type\":\"boolean\"},{\"default\":false,\"name\":\"fromKeyMapping\",\"type\":\"boolean\"}],\"name\":\"RecordLastValueExpresssionDTO\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArrayRecordLastValueExpresssionDTO) SetBoolean(v bool) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) SetInt(v int32) { panic("Unsupported operation") }
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) SetBytes(v []byte) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionNullArrayRecordLastValueExpresssionDTO) SetLong(v int64) {

	r.UnionType = (UnionNullArrayRecordLastValueExpresssionDTOTypeEnum)(v)
}

func (r *UnionNullArrayRecordLastValueExpresssionDTO) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArrayRecordLastValueExpresssionDTO = make([]RecordLastValueExpresssionDTO, 0)
		return &ArrayRecordLastValueExpresssionDTOWrapper{Target: (&r.ArrayRecordLastValueExpresssionDTO)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) NullField(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) HintSize(i int) { panic("Unsupported operation") }
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) SetDefault(i int) {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArrayRecordLastValueExpresssionDTO) Finalize() {}

func (r *UnionNullArrayRecordLastValueExpresssionDTO) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArrayRecordLastValueExpresssionDTOTypeEnumArrayRecordLastValueExpresssionDTO:
		return json.Marshal(map[string]interface{}{"array": r.ArrayRecordLastValueExpresssionDTO})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArrayRecordLastValueExpresssionDTO")
}

func (r *UnionNullArrayRecordLastValueExpresssionDTO) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArrayRecordLastValueExpresssionDTO)
	}
	return fmt.Errorf("invalid value for *UnionNullArrayRecordLastValueExpresssionDTO")
}

// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     stream_data_record_message_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

type UnionNullArraySqlAttributeBindingDataDtoTypeEnum int

const (
	UnionNullArraySqlAttributeBindingDataDtoTypeEnumArraySqlAttributeBindingDataDto UnionNullArraySqlAttributeBindingDataDtoTypeEnum = 1
)

type UnionNullArraySqlAttributeBindingDataDto struct {
	Null                            *types.NullVal
	ArraySqlAttributeBindingDataDto []SqlAttributeBindingDataDto
	UnionType                       UnionNullArraySqlAttributeBindingDataDtoTypeEnum
}

func writeUnionNullArraySqlAttributeBindingDataDto(r *UnionNullArraySqlAttributeBindingDataDto, w io.Writer) error {

	if r == nil {
		err := vm.WriteLong(0, w)
		return err
	}

	err := vm.WriteLong(int64(r.UnionType), w)
	if err != nil {
		return err
	}
	switch r.UnionType {
	case UnionNullArraySqlAttributeBindingDataDtoTypeEnumArraySqlAttributeBindingDataDto:
		return writeArraySqlAttributeBindingDataDto(r.ArraySqlAttributeBindingDataDto, w)
	}
	return fmt.Errorf("invalid value for *UnionNullArraySqlAttributeBindingDataDto")
}

func NewUnionNullArraySqlAttributeBindingDataDto() *UnionNullArraySqlAttributeBindingDataDto {
	return &UnionNullArraySqlAttributeBindingDataDto{}
}

func (r *UnionNullArraySqlAttributeBindingDataDto) Serialize(w io.Writer) error {
	return writeUnionNullArraySqlAttributeBindingDataDto(r, w)
}

func DeserializeUnionNullArraySqlAttributeBindingDataDto(r io.Reader) (*UnionNullArraySqlAttributeBindingDataDto, error) {
	t := NewUnionNullArraySqlAttributeBindingDataDto()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func DeserializeUnionNullArraySqlAttributeBindingDataDtoFromSchema(r io.Reader, schema string) (*UnionNullArraySqlAttributeBindingDataDto, error) {
	t := NewUnionNullArraySqlAttributeBindingDataDto()
	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, t)

	if err != nil {
		return t, err
	}
	return t, err
}

func (r *UnionNullArraySqlAttributeBindingDataDto) Schema() string {
	return "[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"tableName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"query\",\"type\":[\"null\",\"string\"]}],\"name\":\"SqlAttributeBindingDataDto\",\"namespace\":\"com.eventumsolutions.nms.dto\",\"type\":\"record\"},\"type\":\"array\"}]"
}

func (_ *UnionNullArraySqlAttributeBindingDataDto) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *UnionNullArraySqlAttributeBindingDataDto) SetInt(v int32)    { panic("Unsupported operation") }
func (_ *UnionNullArraySqlAttributeBindingDataDto) SetFloat(v float32) {
	panic("Unsupported operation")
}
func (_ *UnionNullArraySqlAttributeBindingDataDto) SetDouble(v float64) {
	panic("Unsupported operation")
}
func (_ *UnionNullArraySqlAttributeBindingDataDto) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *UnionNullArraySqlAttributeBindingDataDto) SetString(v string) {
	panic("Unsupported operation")
}

func (r *UnionNullArraySqlAttributeBindingDataDto) SetLong(v int64) {

	r.UnionType = (UnionNullArraySqlAttributeBindingDataDtoTypeEnum)(v)
}

func (r *UnionNullArraySqlAttributeBindingDataDto) Get(i int) types.Field {

	switch i {
	case 0:
		return r.Null
	case 1:
		r.ArraySqlAttributeBindingDataDto = make([]SqlAttributeBindingDataDto, 0)
		return &ArraySqlAttributeBindingDataDtoWrapper{Target: (&r.ArraySqlAttributeBindingDataDto)}
	}
	panic("Unknown field index")
}
func (_ *UnionNullArraySqlAttributeBindingDataDto) NullField(i int)  { panic("Unsupported operation") }
func (_ *UnionNullArraySqlAttributeBindingDataDto) HintSize(i int)   { panic("Unsupported operation") }
func (_ *UnionNullArraySqlAttributeBindingDataDto) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullArraySqlAttributeBindingDataDto) AppendMap(key string) types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArraySqlAttributeBindingDataDto) AppendArray() types.Field {
	panic("Unsupported operation")
}
func (_ *UnionNullArraySqlAttributeBindingDataDto) Finalize() {}

func (r *UnionNullArraySqlAttributeBindingDataDto) MarshalJSON() ([]byte, error) {

	if r == nil {
		return []byte("null"), nil
	}

	switch r.UnionType {
	case UnionNullArraySqlAttributeBindingDataDtoTypeEnumArraySqlAttributeBindingDataDto:
		return json.Marshal(map[string]interface{}{"array": r.ArraySqlAttributeBindingDataDto})
	}
	return nil, fmt.Errorf("invalid value for *UnionNullArraySqlAttributeBindingDataDto")
}

func (r *UnionNullArraySqlAttributeBindingDataDto) UnmarshalJSON(data []byte) error {

	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}
	if len(fields) > 1 {
		return fmt.Errorf("more than one type supplied for union")
	}
	if value, ok := fields["array"]; ok {
		r.UnionType = 1
		return json.Unmarshal([]byte(value), &r.ArraySqlAttributeBindingDataDto)
	}
	return fmt.Errorf("invalid value for *UnionNullArraySqlAttributeBindingDataDto")
}

// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     stream_data_record_message_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type RefValueMappingDTO struct {
	TreeNode *UnionNullLong `json:"treeNode"`

	KeyMappings *UnionNullMapString `json:"keyMappings"`

	UseAppliedNetworkElement bool `json:"useAppliedNetworkElement"`
}

const RefValueMappingDTOAvroCRC64Fingerprint = "\x83Ki\xe01\x1aC2"

func NewRefValueMappingDTO() RefValueMappingDTO {
	r := RefValueMappingDTO{}
	r.TreeNode = nil
	r.KeyMappings = nil
	r.UseAppliedNetworkElement = false
	return r
}

func DeserializeRefValueMappingDTO(r io.Reader) (RefValueMappingDTO, error) {
	t := NewRefValueMappingDTO()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeRefValueMappingDTOFromSchema(r io.Reader, schema string) (RefValueMappingDTO, error) {
	t := NewRefValueMappingDTO()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeRefValueMappingDTO(r RefValueMappingDTO, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.TreeNode, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.KeyMappings, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.UseAppliedNetworkElement, w)
	if err != nil {
		return err
	}
	return err
}

func (r RefValueMappingDTO) Serialize(w io.Writer) error {
	return writeRefValueMappingDTO(r, w)
}

func (r RefValueMappingDTO) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"treeNode\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"keyMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":false,\"name\":\"useAppliedNetworkElement\",\"type\":\"boolean\"}],\"name\":\"com.eventumsolutions.nms.kafka.messages.streaming.RefValueMappingDTO\",\"type\":\"record\"}"
}

func (r RefValueMappingDTO) SchemaName() string {
	return "com.eventumsolutions.nms.kafka.messages.streaming.RefValueMappingDTO"
}

func (_ RefValueMappingDTO) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ RefValueMappingDTO) SetInt(v int32)       { panic("Unsupported operation") }
func (_ RefValueMappingDTO) SetLong(v int64)      { panic("Unsupported operation") }
func (_ RefValueMappingDTO) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ RefValueMappingDTO) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ RefValueMappingDTO) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ RefValueMappingDTO) SetString(v string)   { panic("Unsupported operation") }
func (_ RefValueMappingDTO) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *RefValueMappingDTO) Get(i int) types.Field {
	switch i {
	case 0:
		r.TreeNode = NewUnionNullLong()

		return r.TreeNode
	case 1:
		r.KeyMappings = NewUnionNullMapString()

		return r.KeyMappings
	case 2:
		w := types.Boolean{Target: &r.UseAppliedNetworkElement}

		return w

	}
	panic("Unknown field index")
}

func (r *RefValueMappingDTO) SetDefault(i int) {
	switch i {
	case 0:
		r.TreeNode = nil
		return
	case 1:
		r.KeyMappings = nil
		return
	case 2:
		r.UseAppliedNetworkElement = false
		return
	}
	panic("Unknown field index")
}

func (r *RefValueMappingDTO) NullField(i int) {
	switch i {
	case 0:
		r.TreeNode = nil
		return
	case 1:
		r.KeyMappings = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ RefValueMappingDTO) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ RefValueMappingDTO) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ RefValueMappingDTO) HintSize(int)                     { panic("Unsupported operation") }
func (_ RefValueMappingDTO) Finalize()                        {}

func (_ RefValueMappingDTO) AvroCRC64Fingerprint() []byte {
	return []byte(RefValueMappingDTOAvroCRC64Fingerprint)
}

func (r RefValueMappingDTO) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["treeNode"], err = json.Marshal(r.TreeNode)
	if err != nil {
		return nil, err
	}
	output["keyMappings"], err = json.Marshal(r.KeyMappings)
	if err != nil {
		return nil, err
	}
	output["useAppliedNetworkElement"], err = json.Marshal(r.UseAppliedNetworkElement)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *RefValueMappingDTO) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["treeNode"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TreeNode); err != nil {
			return err
		}
	} else {
		r.TreeNode = NewUnionNullLong()

		r.TreeNode = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["keyMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.KeyMappings); err != nil {
			return err
		}
	} else {
		r.KeyMappings = NewUnionNullMapString()

		r.KeyMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["useAppliedNetworkElement"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UseAppliedNetworkElement); err != nil {
			return err
		}
	} else {
		r.UseAppliedNetworkElement = false
	}
	return nil
}

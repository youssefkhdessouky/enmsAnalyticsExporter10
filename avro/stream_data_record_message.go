// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     stream_data_record_message_schema.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type StreamDataRecordMessage struct {
	CollectionType *UnionNullString `json:"collectionType"`

	Data *UnionNullMapArrayUnionStringNull `json:"data"`

	PreGroupingFilter *UnionNullString `json:"preGroupingFilter"`

	KeyMappings *UnionNullMapString `json:"keyMappings"`

	FormulaAttributeMappings *UnionNullMapString `json:"formulaAttributeMappings"`

	ColumnIdentifierMappings *UnionNullMapString `json:"columnIdentifierMappings"`

	AppliedNetworkElement *UnionNullLong `json:"appliedNetworkElement"`

	SchedulingTimestamp *UnionNullLong `json:"schedulingTimestamp"`

	DateTimeColumnFormats *UnionNullArrayDateTimeColumnFormatDTO `json:"dateTimeColumnFormats"`

	DiscoveryJob *UnionNullBool `json:"discoveryJob"`

	DeleteOldElements *UnionNullBool `json:"deleteOldElements"`

	DataPath *UnionNullString `json:"dataPath"`

	FileType *UnionNullString `json:"fileType"`

	PreGroupingFormulaColumnMappings *UnionNullMapString `json:"preGroupingFormulaColumnMappings"`

	AttributeBindingName *UnionNullString `json:"attributeBindingName"`

	PushBasedMessage *UnionNullBool `json:"pushBasedMessage"`

	Record *UnionNullBool `json:"record"`

	RecordTypeName *UnionNullString `json:"recordTypeName"`

	DeleteNetworkElement *UnionNullBool `json:"deleteNetworkElement"`

	RefValueMappings *UnionNullMapRefValueMappingDTO `json:"refValueMappings"`

	AllowGrouping *UnionNullBool `json:"allowGrouping"`

	DiscoverAccessMethods *UnionNullBool `json:"discoverAccessMethods"`

	LastValueExpressionParam *UnionNullMapInt `json:"LastValueExpressionParam"`

	AppliedNetworkElementPath *UnionNullMapLong `json:"appliedNetworkElementPath"`

	AppliedNetworkElementTreePath *UnionNullString `json:"appliedNetworkElementTreePath"`

	PostGroupingFilter *UnionNullString `json:"postGroupingFilter"`

	PostGroupingFormulaColumnMappings *UnionNullMapString `json:"postGroupingFormulaColumnMappings"`

	PostRecordLastValueExpression *UnionNullArrayRecordLastValueExpresssionDTO `json:"postRecordLastValueExpression"`

	PreRecordLastValueExpression *UnionNullArrayRecordLastValueExpresssionDTO `json:"preRecordLastValueExpression"`

	CollectionTimestamp *UnionNullLong `json:"collectionTimestamp"`

	DataflowName *UnionNullString `json:"dataflowName"`

	GroupingColumns *UnionNullArrayString `json:"groupingColumns"`

	FormulaFieldsMappings *UnionNullMapString `json:"formulaFieldsMappings"`

	ColumnIdentifierFieldsMappings *UnionNullMapString `json:"columnIdentifierFieldsMappings"`

	RefValueFieldsMappings *UnionNullMapRefValueMappingDTO `json:"refValueFieldsMappings"`

	RefPostProcessing *UnionNullMapRefValueMappingDTO `json:"refPostProcessing"`

	DirectKeyMappings *UnionNullMapString `json:"directKeyMappings"`

	RefKeyMappings *UnionNullMapRefValueMappingDTO `json:"refKeyMappings"`

	CollectionProfileName *UnionNullString `json:"collectionProfileName"`

	Eventable bool `json:"eventable"`

	CollectionCategory *UnionNullString `json:"collectionCategory"`

	SqlRecordTypes *UnionNullArrayLong `json:"sqlRecordTypes"`

	SqlAttributeBindingDataDtos *UnionNullArraySqlAttributeBindingDataDto `json:"sqlAttributeBindingDataDtos"`
}

const StreamDataRecordMessageAvroCRC64Fingerprint = "*\xb7\x1f(\xf8\xdbL\x9c"

func NewStreamDataRecordMessage() StreamDataRecordMessage {
	r := StreamDataRecordMessage{}
	r.CollectionType = nil
	r.Data = nil
	r.PreGroupingFilter = nil
	r.KeyMappings = nil
	r.FormulaAttributeMappings = nil
	r.ColumnIdentifierMappings = nil
	r.AppliedNetworkElement = nil
	r.SchedulingTimestamp = nil
	r.DateTimeColumnFormats = nil
	r.DiscoveryJob = nil
	r.DeleteOldElements = nil
	r.DataPath = nil
	r.FileType = nil
	r.PreGroupingFormulaColumnMappings = nil
	r.AttributeBindingName = nil
	r.PushBasedMessage = nil
	r.Record = nil
	r.RecordTypeName = nil
	r.DeleteNetworkElement = nil
	r.RefValueMappings = nil
	r.AllowGrouping = nil
	r.DiscoverAccessMethods = nil
	r.LastValueExpressionParam = nil
	r.AppliedNetworkElementPath = nil
	r.AppliedNetworkElementTreePath = nil
	r.PostGroupingFilter = nil
	r.PostGroupingFormulaColumnMappings = nil
	r.PostRecordLastValueExpression = nil
	r.PreRecordLastValueExpression = nil
	r.CollectionTimestamp = nil
	r.DataflowName = nil
	r.GroupingColumns = nil
	r.FormulaFieldsMappings = nil
	r.ColumnIdentifierFieldsMappings = nil
	r.RefValueFieldsMappings = nil
	r.RefPostProcessing = nil
	r.DirectKeyMappings = nil
	r.RefKeyMappings = nil
	r.CollectionProfileName = nil
	r.Eventable = true
	r.CollectionCategory = nil
	r.SqlRecordTypes = nil
	r.SqlAttributeBindingDataDtos = nil
	return r
}

func DeserializeStreamDataRecordMessage(r io.Reader) (StreamDataRecordMessage, error) {
	t := NewStreamDataRecordMessage()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeStreamDataRecordMessageFromSchema(r io.Reader, schema string) (StreamDataRecordMessage, error) {
	t := NewStreamDataRecordMessage()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeStreamDataRecordMessage(r StreamDataRecordMessage, w io.Writer) error {
	var err error
	err = writeUnionNullString(r.CollectionType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapArrayUnionStringNull(r.Data, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PreGroupingFilter, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.KeyMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.FormulaAttributeMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.ColumnIdentifierMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.AppliedNetworkElement, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.SchedulingTimestamp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayDateTimeColumnFormatDTO(r.DateTimeColumnFormats, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.DiscoveryJob, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.DeleteOldElements, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DataPath, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.FileType, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.PreGroupingFormulaColumnMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AttributeBindingName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.PushBasedMessage, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.Record, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.RecordTypeName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.DeleteNetworkElement, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapRefValueMappingDTO(r.RefValueMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.AllowGrouping, w)
	if err != nil {
		return err
	}
	err = writeUnionNullBool(r.DiscoverAccessMethods, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapInt(r.LastValueExpressionParam, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapLong(r.AppliedNetworkElementPath, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.AppliedNetworkElementTreePath, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.PostGroupingFilter, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.PostGroupingFormulaColumnMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayRecordLastValueExpresssionDTO(r.PostRecordLastValueExpression, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayRecordLastValueExpresssionDTO(r.PreRecordLastValueExpression, w)
	if err != nil {
		return err
	}
	err = writeUnionNullLong(r.CollectionTimestamp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.DataflowName, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayString(r.GroupingColumns, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.FormulaFieldsMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.ColumnIdentifierFieldsMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapRefValueMappingDTO(r.RefValueFieldsMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapRefValueMappingDTO(r.RefPostProcessing, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapString(r.DirectKeyMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullMapRefValueMappingDTO(r.RefKeyMappings, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CollectionProfileName, w)
	if err != nil {
		return err
	}
	err = vm.WriteBool(r.Eventable, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.CollectionCategory, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArrayLong(r.SqlRecordTypes, w)
	if err != nil {
		return err
	}
	err = writeUnionNullArraySqlAttributeBindingDataDto(r.SqlAttributeBindingDataDtos, w)
	if err != nil {
		return err
	}
	return err
}

func (r StreamDataRecordMessage) Serialize(w io.Writer) error {
	return writeStreamDataRecordMessage(r, w)
}

func (r StreamDataRecordMessage) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"collectionType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"data\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"items\":[\"string\",\"null\"],\"type\":\"array\"}}]},{\"default\":null,\"name\":\"preGroupingFilter\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"keyMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"formulaAttributeMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"columnIdentifierMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"appliedNetworkElement\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"schedulingTimestamp\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"dateTimeColumnFormats\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"columnName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"format\",\"type\":[\"null\",\"string\"]}],\"name\":\"DateTimeColumnFormatDTO\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"discoveryJob\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"deleteOldElements\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"dataPath\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"fileType\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"preGroupingFormulaColumnMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"attributeBindingName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"pushBasedMessage\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"record\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"recordTypeName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"deleteNetworkElement\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"refValueMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"fields\":[{\"default\":null,\"name\":\"treeNode\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"keyMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":false,\"name\":\"useAppliedNetworkElement\",\"type\":\"boolean\"}],\"name\":\"RefValueMappingDTO\",\"type\":\"record\"}}]},{\"default\":null,\"name\":\"allowGrouping\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"discoverAccessMethods\",\"type\":[\"null\",\"boolean\"]},{\"default\":null,\"name\":\"LastValueExpressionParam\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"int\"}]},{\"default\":null,\"name\":\"appliedNetworkElementPath\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"long\"}]},{\"default\":null,\"name\":\"appliedNetworkElementTreePath\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"postGroupingFilter\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"postGroupingFormulaColumnMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"postRecordLastValueExpression\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"recordFieldExpression\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"long\"}]},{\"default\":null,\"name\":\"keyGroup\",\"type\":[\"null\",{\"items\":{\"type\":\"map\",\"values\":\"string\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"recordTypeId\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"allDataExists\",\"type\":[\"null\",\"boolean\"]},{\"default\":false,\"name\":\"isAttributeRecordType\",\"type\":\"boolean\"},{\"default\":false,\"name\":\"fromKeyMapping\",\"type\":\"boolean\"}],\"name\":\"RecordLastValueExpresssionDTO\",\"type\":\"record\"},\"type\":\"array\"}]},{\"default\":null,\"name\":\"preRecordLastValueExpression\",\"type\":[\"null\",{\"items\":\"com.eventumsolutions.nms.kafka.messages.streaming.RecordLastValueExpresssionDTO\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"collectionTimestamp\",\"type\":[\"null\",\"long\"]},{\"default\":null,\"name\":\"dataflowName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"groupingColumns\",\"type\":[\"null\",{\"items\":\"string\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"formulaFieldsMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"columnIdentifierFieldsMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"refValueFieldsMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"com.eventumsolutions.nms.kafka.messages.streaming.RefValueMappingDTO\"}]},{\"default\":null,\"name\":\"refPostProcessing\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"com.eventumsolutions.nms.kafka.messages.streaming.RefValueMappingDTO\"}]},{\"default\":null,\"name\":\"directKeyMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"string\"}]},{\"default\":null,\"name\":\"refKeyMappings\",\"type\":[\"null\",{\"type\":\"map\",\"values\":\"com.eventumsolutions.nms.kafka.messages.streaming.RefValueMappingDTO\"}]},{\"default\":null,\"name\":\"collectionProfileName\",\"type\":[\"null\",\"string\"]},{\"default\":true,\"name\":\"eventable\",\"type\":\"boolean\"},{\"default\":null,\"name\":\"collectionCategory\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"sqlRecordTypes\",\"type\":[\"null\",{\"items\":\"long\",\"type\":\"array\"}]},{\"default\":null,\"name\":\"sqlAttributeBindingDataDtos\",\"type\":[\"null\",{\"items\":{\"fields\":[{\"default\":null,\"name\":\"tableName\",\"type\":[\"null\",\"string\"]},{\"default\":null,\"name\":\"query\",\"type\":[\"null\",\"string\"]}],\"name\":\"SqlAttributeBindingDataDto\",\"namespace\":\"com.eventumsolutions.nms.dto\",\"type\":\"record\"},\"type\":\"array\"}]}],\"name\":\"com.eventumsolutions.nms.kafka.messages.streaming.StreamDataRecordMessage\",\"type\":\"record\"}"
}

func (r StreamDataRecordMessage) SchemaName() string {
	return "com.eventumsolutions.nms.kafka.messages.streaming.StreamDataRecordMessage"
}

func (_ StreamDataRecordMessage) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) SetInt(v int32)       { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) SetLong(v int64)      { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) SetString(v string)   { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *StreamDataRecordMessage) Get(i int) types.Field {
	switch i {
	case 0:
		r.CollectionType = NewUnionNullString()

		return r.CollectionType
	case 1:
		r.Data = NewUnionNullMapArrayUnionStringNull()

		return r.Data
	case 2:
		r.PreGroupingFilter = NewUnionNullString()

		return r.PreGroupingFilter
	case 3:
		r.KeyMappings = NewUnionNullMapString()

		return r.KeyMappings
	case 4:
		r.FormulaAttributeMappings = NewUnionNullMapString()

		return r.FormulaAttributeMappings
	case 5:
		r.ColumnIdentifierMappings = NewUnionNullMapString()

		return r.ColumnIdentifierMappings
	case 6:
		r.AppliedNetworkElement = NewUnionNullLong()

		return r.AppliedNetworkElement
	case 7:
		r.SchedulingTimestamp = NewUnionNullLong()

		return r.SchedulingTimestamp
	case 8:
		r.DateTimeColumnFormats = NewUnionNullArrayDateTimeColumnFormatDTO()

		return r.DateTimeColumnFormats
	case 9:
		r.DiscoveryJob = NewUnionNullBool()

		return r.DiscoveryJob
	case 10:
		r.DeleteOldElements = NewUnionNullBool()

		return r.DeleteOldElements
	case 11:
		r.DataPath = NewUnionNullString()

		return r.DataPath
	case 12:
		r.FileType = NewUnionNullString()

		return r.FileType
	case 13:
		r.PreGroupingFormulaColumnMappings = NewUnionNullMapString()

		return r.PreGroupingFormulaColumnMappings
	case 14:
		r.AttributeBindingName = NewUnionNullString()

		return r.AttributeBindingName
	case 15:
		r.PushBasedMessage = NewUnionNullBool()

		return r.PushBasedMessage
	case 16:
		r.Record = NewUnionNullBool()

		return r.Record
	case 17:
		r.RecordTypeName = NewUnionNullString()

		return r.RecordTypeName
	case 18:
		r.DeleteNetworkElement = NewUnionNullBool()

		return r.DeleteNetworkElement
	case 19:
		r.RefValueMappings = NewUnionNullMapRefValueMappingDTO()

		return r.RefValueMappings
	case 20:
		r.AllowGrouping = NewUnionNullBool()

		return r.AllowGrouping
	case 21:
		r.DiscoverAccessMethods = NewUnionNullBool()

		return r.DiscoverAccessMethods
	case 22:
		r.LastValueExpressionParam = NewUnionNullMapInt()

		return r.LastValueExpressionParam
	case 23:
		r.AppliedNetworkElementPath = NewUnionNullMapLong()

		return r.AppliedNetworkElementPath
	case 24:
		r.AppliedNetworkElementTreePath = NewUnionNullString()

		return r.AppliedNetworkElementTreePath
	case 25:
		r.PostGroupingFilter = NewUnionNullString()

		return r.PostGroupingFilter
	case 26:
		r.PostGroupingFormulaColumnMappings = NewUnionNullMapString()

		return r.PostGroupingFormulaColumnMappings
	case 27:
		r.PostRecordLastValueExpression = NewUnionNullArrayRecordLastValueExpresssionDTO()

		return r.PostRecordLastValueExpression
	case 28:
		r.PreRecordLastValueExpression = NewUnionNullArrayRecordLastValueExpresssionDTO()

		return r.PreRecordLastValueExpression
	case 29:
		r.CollectionTimestamp = NewUnionNullLong()

		return r.CollectionTimestamp
	case 30:
		r.DataflowName = NewUnionNullString()

		return r.DataflowName
	case 31:
		r.GroupingColumns = NewUnionNullArrayString()

		return r.GroupingColumns
	case 32:
		r.FormulaFieldsMappings = NewUnionNullMapString()

		return r.FormulaFieldsMappings
	case 33:
		r.ColumnIdentifierFieldsMappings = NewUnionNullMapString()

		return r.ColumnIdentifierFieldsMappings
	case 34:
		r.RefValueFieldsMappings = NewUnionNullMapRefValueMappingDTO()

		return r.RefValueFieldsMappings
	case 35:
		r.RefPostProcessing = NewUnionNullMapRefValueMappingDTO()

		return r.RefPostProcessing
	case 36:
		r.DirectKeyMappings = NewUnionNullMapString()

		return r.DirectKeyMappings
	case 37:
		r.RefKeyMappings = NewUnionNullMapRefValueMappingDTO()

		return r.RefKeyMappings
	case 38:
		r.CollectionProfileName = NewUnionNullString()

		return r.CollectionProfileName
	case 39:
		w := types.Boolean{Target: &r.Eventable}

		return w

	case 40:
		r.CollectionCategory = NewUnionNullString()

		return r.CollectionCategory
	case 41:
		r.SqlRecordTypes = NewUnionNullArrayLong()

		return r.SqlRecordTypes
	case 42:
		r.SqlAttributeBindingDataDtos = NewUnionNullArraySqlAttributeBindingDataDto()

		return r.SqlAttributeBindingDataDtos
	}
	panic("Unknown field index")
}

func (r *StreamDataRecordMessage) SetDefault(i int) {
	switch i {
	case 0:
		r.CollectionType = nil
		return
	case 1:
		r.Data = nil
		return
	case 2:
		r.PreGroupingFilter = nil
		return
	case 3:
		r.KeyMappings = nil
		return
	case 4:
		r.FormulaAttributeMappings = nil
		return
	case 5:
		r.ColumnIdentifierMappings = nil
		return
	case 6:
		r.AppliedNetworkElement = nil
		return
	case 7:
		r.SchedulingTimestamp = nil
		return
	case 8:
		r.DateTimeColumnFormats = nil
		return
	case 9:
		r.DiscoveryJob = nil
		return
	case 10:
		r.DeleteOldElements = nil
		return
	case 11:
		r.DataPath = nil
		return
	case 12:
		r.FileType = nil
		return
	case 13:
		r.PreGroupingFormulaColumnMappings = nil
		return
	case 14:
		r.AttributeBindingName = nil
		return
	case 15:
		r.PushBasedMessage = nil
		return
	case 16:
		r.Record = nil
		return
	case 17:
		r.RecordTypeName = nil
		return
	case 18:
		r.DeleteNetworkElement = nil
		return
	case 19:
		r.RefValueMappings = nil
		return
	case 20:
		r.AllowGrouping = nil
		return
	case 21:
		r.DiscoverAccessMethods = nil
		return
	case 22:
		r.LastValueExpressionParam = nil
		return
	case 23:
		r.AppliedNetworkElementPath = nil
		return
	case 24:
		r.AppliedNetworkElementTreePath = nil
		return
	case 25:
		r.PostGroupingFilter = nil
		return
	case 26:
		r.PostGroupingFormulaColumnMappings = nil
		return
	case 27:
		r.PostRecordLastValueExpression = nil
		return
	case 28:
		r.PreRecordLastValueExpression = nil
		return
	case 29:
		r.CollectionTimestamp = nil
		return
	case 30:
		r.DataflowName = nil
		return
	case 31:
		r.GroupingColumns = nil
		return
	case 32:
		r.FormulaFieldsMappings = nil
		return
	case 33:
		r.ColumnIdentifierFieldsMappings = nil
		return
	case 34:
		r.RefValueFieldsMappings = nil
		return
	case 35:
		r.RefPostProcessing = nil
		return
	case 36:
		r.DirectKeyMappings = nil
		return
	case 37:
		r.RefKeyMappings = nil
		return
	case 38:
		r.CollectionProfileName = nil
		return
	case 39:
		r.Eventable = true
		return
	case 40:
		r.CollectionCategory = nil
		return
	case 41:
		r.SqlRecordTypes = nil
		return
	case 42:
		r.SqlAttributeBindingDataDtos = nil
		return
	}
	panic("Unknown field index")
}

func (r *StreamDataRecordMessage) NullField(i int) {
	switch i {
	case 0:
		r.CollectionType = nil
		return
	case 1:
		r.Data = nil
		return
	case 2:
		r.PreGroupingFilter = nil
		return
	case 3:
		r.KeyMappings = nil
		return
	case 4:
		r.FormulaAttributeMappings = nil
		return
	case 5:
		r.ColumnIdentifierMappings = nil
		return
	case 6:
		r.AppliedNetworkElement = nil
		return
	case 7:
		r.SchedulingTimestamp = nil
		return
	case 8:
		r.DateTimeColumnFormats = nil
		return
	case 9:
		r.DiscoveryJob = nil
		return
	case 10:
		r.DeleteOldElements = nil
		return
	case 11:
		r.DataPath = nil
		return
	case 12:
		r.FileType = nil
		return
	case 13:
		r.PreGroupingFormulaColumnMappings = nil
		return
	case 14:
		r.AttributeBindingName = nil
		return
	case 15:
		r.PushBasedMessage = nil
		return
	case 16:
		r.Record = nil
		return
	case 17:
		r.RecordTypeName = nil
		return
	case 18:
		r.DeleteNetworkElement = nil
		return
	case 19:
		r.RefValueMappings = nil
		return
	case 20:
		r.AllowGrouping = nil
		return
	case 21:
		r.DiscoverAccessMethods = nil
		return
	case 22:
		r.LastValueExpressionParam = nil
		return
	case 23:
		r.AppliedNetworkElementPath = nil
		return
	case 24:
		r.AppliedNetworkElementTreePath = nil
		return
	case 25:
		r.PostGroupingFilter = nil
		return
	case 26:
		r.PostGroupingFormulaColumnMappings = nil
		return
	case 27:
		r.PostRecordLastValueExpression = nil
		return
	case 28:
		r.PreRecordLastValueExpression = nil
		return
	case 29:
		r.CollectionTimestamp = nil
		return
	case 30:
		r.DataflowName = nil
		return
	case 31:
		r.GroupingColumns = nil
		return
	case 32:
		r.FormulaFieldsMappings = nil
		return
	case 33:
		r.ColumnIdentifierFieldsMappings = nil
		return
	case 34:
		r.RefValueFieldsMappings = nil
		return
	case 35:
		r.RefPostProcessing = nil
		return
	case 36:
		r.DirectKeyMappings = nil
		return
	case 37:
		r.RefKeyMappings = nil
		return
	case 38:
		r.CollectionProfileName = nil
		return
	case 40:
		r.CollectionCategory = nil
		return
	case 41:
		r.SqlRecordTypes = nil
		return
	case 42:
		r.SqlAttributeBindingDataDtos = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ StreamDataRecordMessage) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) HintSize(int)                     { panic("Unsupported operation") }
func (_ StreamDataRecordMessage) Finalize()                        {}

func (_ StreamDataRecordMessage) AvroCRC64Fingerprint() []byte {
	return []byte(StreamDataRecordMessageAvroCRC64Fingerprint)
}

func (r StreamDataRecordMessage) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["collectionType"], err = json.Marshal(r.CollectionType)
	if err != nil {
		return nil, err
	}
	output["data"], err = json.Marshal(r.Data)
	if err != nil {
		return nil, err
	}
	output["preGroupingFilter"], err = json.Marshal(r.PreGroupingFilter)
	if err != nil {
		return nil, err
	}
	output["keyMappings"], err = json.Marshal(r.KeyMappings)
	if err != nil {
		return nil, err
	}
	output["formulaAttributeMappings"], err = json.Marshal(r.FormulaAttributeMappings)
	if err != nil {
		return nil, err
	}
	output["columnIdentifierMappings"], err = json.Marshal(r.ColumnIdentifierMappings)
	if err != nil {
		return nil, err
	}
	output["appliedNetworkElement"], err = json.Marshal(r.AppliedNetworkElement)
	if err != nil {
		return nil, err
	}
	output["schedulingTimestamp"], err = json.Marshal(r.SchedulingTimestamp)
	if err != nil {
		return nil, err
	}
	output["dateTimeColumnFormats"], err = json.Marshal(r.DateTimeColumnFormats)
	if err != nil {
		return nil, err
	}
	output["discoveryJob"], err = json.Marshal(r.DiscoveryJob)
	if err != nil {
		return nil, err
	}
	output["deleteOldElements"], err = json.Marshal(r.DeleteOldElements)
	if err != nil {
		return nil, err
	}
	output["dataPath"], err = json.Marshal(r.DataPath)
	if err != nil {
		return nil, err
	}
	output["fileType"], err = json.Marshal(r.FileType)
	if err != nil {
		return nil, err
	}
	output["preGroupingFormulaColumnMappings"], err = json.Marshal(r.PreGroupingFormulaColumnMappings)
	if err != nil {
		return nil, err
	}
	output["attributeBindingName"], err = json.Marshal(r.AttributeBindingName)
	if err != nil {
		return nil, err
	}
	output["pushBasedMessage"], err = json.Marshal(r.PushBasedMessage)
	if err != nil {
		return nil, err
	}
	output["record"], err = json.Marshal(r.Record)
	if err != nil {
		return nil, err
	}
	output["recordTypeName"], err = json.Marshal(r.RecordTypeName)
	if err != nil {
		return nil, err
	}
	output["deleteNetworkElement"], err = json.Marshal(r.DeleteNetworkElement)
	if err != nil {
		return nil, err
	}
	output["refValueMappings"], err = json.Marshal(r.RefValueMappings)
	if err != nil {
		return nil, err
	}
	output["allowGrouping"], err = json.Marshal(r.AllowGrouping)
	if err != nil {
		return nil, err
	}
	output["discoverAccessMethods"], err = json.Marshal(r.DiscoverAccessMethods)
	if err != nil {
		return nil, err
	}
	output["LastValueExpressionParam"], err = json.Marshal(r.LastValueExpressionParam)
	if err != nil {
		return nil, err
	}
	output["appliedNetworkElementPath"], err = json.Marshal(r.AppliedNetworkElementPath)
	if err != nil {
		return nil, err
	}
	output["appliedNetworkElementTreePath"], err = json.Marshal(r.AppliedNetworkElementTreePath)
	if err != nil {
		return nil, err
	}
	output["postGroupingFilter"], err = json.Marshal(r.PostGroupingFilter)
	if err != nil {
		return nil, err
	}
	output["postGroupingFormulaColumnMappings"], err = json.Marshal(r.PostGroupingFormulaColumnMappings)
	if err != nil {
		return nil, err
	}
	output["postRecordLastValueExpression"], err = json.Marshal(r.PostRecordLastValueExpression)
	if err != nil {
		return nil, err
	}
	output["preRecordLastValueExpression"], err = json.Marshal(r.PreRecordLastValueExpression)
	if err != nil {
		return nil, err
	}
	output["collectionTimestamp"], err = json.Marshal(r.CollectionTimestamp)
	if err != nil {
		return nil, err
	}
	output["dataflowName"], err = json.Marshal(r.DataflowName)
	if err != nil {
		return nil, err
	}
	output["groupingColumns"], err = json.Marshal(r.GroupingColumns)
	if err != nil {
		return nil, err
	}
	output["formulaFieldsMappings"], err = json.Marshal(r.FormulaFieldsMappings)
	if err != nil {
		return nil, err
	}
	output["columnIdentifierFieldsMappings"], err = json.Marshal(r.ColumnIdentifierFieldsMappings)
	if err != nil {
		return nil, err
	}
	output["refValueFieldsMappings"], err = json.Marshal(r.RefValueFieldsMappings)
	if err != nil {
		return nil, err
	}
	output["refPostProcessing"], err = json.Marshal(r.RefPostProcessing)
	if err != nil {
		return nil, err
	}
	output["directKeyMappings"], err = json.Marshal(r.DirectKeyMappings)
	if err != nil {
		return nil, err
	}
	output["refKeyMappings"], err = json.Marshal(r.RefKeyMappings)
	if err != nil {
		return nil, err
	}
	output["collectionProfileName"], err = json.Marshal(r.CollectionProfileName)
	if err != nil {
		return nil, err
	}
	output["eventable"], err = json.Marshal(r.Eventable)
	if err != nil {
		return nil, err
	}
	output["collectionCategory"], err = json.Marshal(r.CollectionCategory)
	if err != nil {
		return nil, err
	}
	output["sqlRecordTypes"], err = json.Marshal(r.SqlRecordTypes)
	if err != nil {
		return nil, err
	}
	output["sqlAttributeBindingDataDtos"], err = json.Marshal(r.SqlAttributeBindingDataDtos)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *StreamDataRecordMessage) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["collectionType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CollectionType); err != nil {
			return err
		}
	} else {
		r.CollectionType = NewUnionNullString()

		r.CollectionType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["data"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Data); err != nil {
			return err
		}
	} else {
		r.Data = NewUnionNullMapArrayUnionStringNull()

		r.Data = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["preGroupingFilter"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PreGroupingFilter); err != nil {
			return err
		}
	} else {
		r.PreGroupingFilter = NewUnionNullString()

		r.PreGroupingFilter = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["keyMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.KeyMappings); err != nil {
			return err
		}
	} else {
		r.KeyMappings = NewUnionNullMapString()

		r.KeyMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["formulaAttributeMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormulaAttributeMappings); err != nil {
			return err
		}
	} else {
		r.FormulaAttributeMappings = NewUnionNullMapString()

		r.FormulaAttributeMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["columnIdentifierMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ColumnIdentifierMappings); err != nil {
			return err
		}
	} else {
		r.ColumnIdentifierMappings = NewUnionNullMapString()

		r.ColumnIdentifierMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["appliedNetworkElement"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AppliedNetworkElement); err != nil {
			return err
		}
	} else {
		r.AppliedNetworkElement = NewUnionNullLong()

		r.AppliedNetworkElement = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["schedulingTimestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SchedulingTimestamp); err != nil {
			return err
		}
	} else {
		r.SchedulingTimestamp = NewUnionNullLong()

		r.SchedulingTimestamp = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["dateTimeColumnFormats"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DateTimeColumnFormats); err != nil {
			return err
		}
	} else {
		r.DateTimeColumnFormats = NewUnionNullArrayDateTimeColumnFormatDTO()

		r.DateTimeColumnFormats = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["discoveryJob"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DiscoveryJob); err != nil {
			return err
		}
	} else {
		r.DiscoveryJob = NewUnionNullBool()

		r.DiscoveryJob = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["deleteOldElements"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeleteOldElements); err != nil {
			return err
		}
	} else {
		r.DeleteOldElements = NewUnionNullBool()

		r.DeleteOldElements = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["dataPath"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DataPath); err != nil {
			return err
		}
	} else {
		r.DataPath = NewUnionNullString()

		r.DataPath = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["fileType"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FileType); err != nil {
			return err
		}
	} else {
		r.FileType = NewUnionNullString()

		r.FileType = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["preGroupingFormulaColumnMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PreGroupingFormulaColumnMappings); err != nil {
			return err
		}
	} else {
		r.PreGroupingFormulaColumnMappings = NewUnionNullMapString()

		r.PreGroupingFormulaColumnMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["attributeBindingName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AttributeBindingName); err != nil {
			return err
		}
	} else {
		r.AttributeBindingName = NewUnionNullString()

		r.AttributeBindingName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["pushBasedMessage"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PushBasedMessage); err != nil {
			return err
		}
	} else {
		r.PushBasedMessage = NewUnionNullBool()

		r.PushBasedMessage = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["record"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Record); err != nil {
			return err
		}
	} else {
		r.Record = NewUnionNullBool()

		r.Record = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["recordTypeName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RecordTypeName); err != nil {
			return err
		}
	} else {
		r.RecordTypeName = NewUnionNullString()

		r.RecordTypeName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["deleteNetworkElement"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DeleteNetworkElement); err != nil {
			return err
		}
	} else {
		r.DeleteNetworkElement = NewUnionNullBool()

		r.DeleteNetworkElement = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["refValueMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RefValueMappings); err != nil {
			return err
		}
	} else {
		r.RefValueMappings = NewUnionNullMapRefValueMappingDTO()

		r.RefValueMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["allowGrouping"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AllowGrouping); err != nil {
			return err
		}
	} else {
		r.AllowGrouping = NewUnionNullBool()

		r.AllowGrouping = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["discoverAccessMethods"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DiscoverAccessMethods); err != nil {
			return err
		}
	} else {
		r.DiscoverAccessMethods = NewUnionNullBool()

		r.DiscoverAccessMethods = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["LastValueExpressionParam"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.LastValueExpressionParam); err != nil {
			return err
		}
	} else {
		r.LastValueExpressionParam = NewUnionNullMapInt()

		r.LastValueExpressionParam = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["appliedNetworkElementPath"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AppliedNetworkElementPath); err != nil {
			return err
		}
	} else {
		r.AppliedNetworkElementPath = NewUnionNullMapLong()

		r.AppliedNetworkElementPath = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["appliedNetworkElementTreePath"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.AppliedNetworkElementTreePath); err != nil {
			return err
		}
	} else {
		r.AppliedNetworkElementTreePath = NewUnionNullString()

		r.AppliedNetworkElementTreePath = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["postGroupingFilter"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostGroupingFilter); err != nil {
			return err
		}
	} else {
		r.PostGroupingFilter = NewUnionNullString()

		r.PostGroupingFilter = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["postGroupingFormulaColumnMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostGroupingFormulaColumnMappings); err != nil {
			return err
		}
	} else {
		r.PostGroupingFormulaColumnMappings = NewUnionNullMapString()

		r.PostGroupingFormulaColumnMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["postRecordLastValueExpression"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PostRecordLastValueExpression); err != nil {
			return err
		}
	} else {
		r.PostRecordLastValueExpression = NewUnionNullArrayRecordLastValueExpresssionDTO()

		r.PostRecordLastValueExpression = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["preRecordLastValueExpression"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.PreRecordLastValueExpression); err != nil {
			return err
		}
	} else {
		r.PreRecordLastValueExpression = NewUnionNullArrayRecordLastValueExpresssionDTO()

		r.PreRecordLastValueExpression = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["collectionTimestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CollectionTimestamp); err != nil {
			return err
		}
	} else {
		r.CollectionTimestamp = NewUnionNullLong()

		r.CollectionTimestamp = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["dataflowName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DataflowName); err != nil {
			return err
		}
	} else {
		r.DataflowName = NewUnionNullString()

		r.DataflowName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["groupingColumns"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.GroupingColumns); err != nil {
			return err
		}
	} else {
		r.GroupingColumns = NewUnionNullArrayString()

		r.GroupingColumns = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["formulaFieldsMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.FormulaFieldsMappings); err != nil {
			return err
		}
	} else {
		r.FormulaFieldsMappings = NewUnionNullMapString()

		r.FormulaFieldsMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["columnIdentifierFieldsMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ColumnIdentifierFieldsMappings); err != nil {
			return err
		}
	} else {
		r.ColumnIdentifierFieldsMappings = NewUnionNullMapString()

		r.ColumnIdentifierFieldsMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["refValueFieldsMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RefValueFieldsMappings); err != nil {
			return err
		}
	} else {
		r.RefValueFieldsMappings = NewUnionNullMapRefValueMappingDTO()

		r.RefValueFieldsMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["refPostProcessing"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RefPostProcessing); err != nil {
			return err
		}
	} else {
		r.RefPostProcessing = NewUnionNullMapRefValueMappingDTO()

		r.RefPostProcessing = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["directKeyMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.DirectKeyMappings); err != nil {
			return err
		}
	} else {
		r.DirectKeyMappings = NewUnionNullMapString()

		r.DirectKeyMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["refKeyMappings"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RefKeyMappings); err != nil {
			return err
		}
	} else {
		r.RefKeyMappings = NewUnionNullMapRefValueMappingDTO()

		r.RefKeyMappings = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["collectionProfileName"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CollectionProfileName); err != nil {
			return err
		}
	} else {
		r.CollectionProfileName = NewUnionNullString()

		r.CollectionProfileName = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["eventable"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Eventable); err != nil {
			return err
		}
	} else {
		r.Eventable = true
	}
	val = func() json.RawMessage {
		if v, ok := fields["collectionCategory"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.CollectionCategory); err != nil {
			return err
		}
	} else {
		r.CollectionCategory = NewUnionNullString()

		r.CollectionCategory = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["sqlRecordTypes"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SqlRecordTypes); err != nil {
			return err
		}
	} else {
		r.SqlRecordTypes = NewUnionNullArrayLong()

		r.SqlRecordTypes = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["sqlAttributeBindingDataDtos"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.SqlAttributeBindingDataDtos); err != nil {
			return err
		}
	} else {
		r.SqlAttributeBindingDataDtos = NewUnionNullArraySqlAttributeBindingDataDto()

		r.SqlAttributeBindingDataDtos = nil
	}
	return nil
}
